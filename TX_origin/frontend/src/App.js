import React, {useEffect, useState} from 'react'
import { Header, Button, Card, Image } from 'semantic-ui-react'

import AccountCard from "./components/AccountCard"
import getWeb3 from "./getWeb3"
import Attacker from "./contracts/Attacker.json"
import Phishable from "./contracts/Phishable.json"

const App = () => {
  const [web3State, setWeb3State] = useState({
    web3: null,
    currentAccount: null,
    accounts: null,
    attacker: null,
    phishable: null
  })

  const [balances, setBalances] = useState(null)

  useEffect(()=>{
    /* ComponentDidMount */
    const fetch = async () => {
      try {
        const web3 = await getWeb3();
        const currentAccount = await web3.eth.getAccounts();
        const accounts = ["0x58aE1f41288596e774cDFF5cd138b9af2C920C44", "0x21394233503cF69e6ea73386C17aD63E94a34329", "0x3Db103541DfF3B265Ca1D5b7bc05a3f20fd81466"];
        const networkId = await web3.eth.net.getId();
        var deployedNetwork1 = Attacker.networks[networkId];
        const instance1 = new web3.eth.Contract(
          Attacker.abi,
          deployedNetwork1 && deployedNetwork1.address,
        );
        const deployedNetwork2 = Phishable.networks[networkId];
        const instance2 = new web3.eth.Contract(
          Phishable.abi,
          deployedNetwork2 && deployedNetwork2.address,
        );
        setWeb3State({ web3: web3, accounts: accounts, currentAccount: currentAccount, attacker: instance1, phishable: instance2 });
      } catch (error) {
        alert(
          `Failed to load web3, accounts, or contract. Check console for details.`,
        );
        console.error(error);
      }
    }
    fetch()
  }, [])

  useEffect(()=>{
    if (web3State.web3) {
      function getBalances() {
        return Promise.all(["0x58aE1f41288596e774cDFF5cd138b9af2C920C44", "0x21394233503cF69e6ea73386C17aD63E94a34329", "0x3Db103541DfF3B265Ca1D5b7bc05a3f20fd81466", web3State.phishable.options.address, web3State.attacker.options.address].map(
          acc => web3State.web3.eth.getBalance(acc).then(bal => web3State.web3.utils.fromWei(bal, 'ether').toString(10))));
      }
      getBalances().then(bals => setBalances(bals))
    }
  })
  
  const send = (from, to, amount) => {
    const amountToSend = web3State.web3.utils.toWei(amount.toString(10), "ether"); //convert to wei value
    var send = web3State.web3.eth.sendTransaction({from,to, value:amountToSend});
  }

  const transferTo = (from, to, amount) => {
    const amountToSend = web3State.web3.utils.toWei(amount.toString(10), "ether");
    web3State.phishable.methods.transferTo(to, amountToSend).send({ from: from });
  }

  const donothig = () => {console.log("This contract doesn't provide withdraw function.")}
  
  
  if (!web3State.web3 || !balances) {
    return <div>Loading Web3, accounts, and contract...</div>;
  }
  return (
    <div className="ui segment container">
      <Header as='h1' dividing>Tx.origin attack demo</Header>
      <h2>Your current address: {web3State.currentAccount}</h2>
      <Card.Group itemsPerRow={1}>
        <AccountCard 
        imgsrc={'https://react.semantic-ui.com/images/avatar/large/daniel.jpg'}
        index={0}
        to={web3State.accounts[0]}
        from={web3State.currentAccount[0]}
        balance={balances[0]}
        isEOA={true}
        sendfunc={send}
        />
        <AccountCard 
        imgsrc={'https://react.semantic-ui.com/images/avatar/large/steve.jpg'}
        index={1}
        to={web3State.accounts[1]}
        from={web3State.currentAccount[0]}
        balance={balances[1]}
        isEOA={true}
        sendfunc={send}
        />
        <AccountCard 
        imgsrc={'https://react.semantic-ui.com/images/avatar/large/molly.png'}
        index={2}
        to={web3State.accounts[2]}
        from={web3State.currentAccount[0]}
        balance={balances[2]}
        isEOA={true}
        sendfunc={send}
        />
        <AccountCard 
        imgsrc={'https://react.semantic-ui.com/images/avatar/large/daniel.jpg'}
        index={3}
        to={web3State.phishable.options.address}
        from={web3State.currentAccount[0]}
        balance={balances[3]}
        isEOA={false}
        sendfunc={send}
        contractToMap={[web3State.accounts[0],web3State.accounts[1],web3State.accounts[2],web3State.phishable.options.address,web3State.attacker.options.address]}
        transferTofunc={transferTo}
        />
        <AccountCard 
        imgsrc={'https://react.semantic-ui.com/images/avatar/large/steve.jpg'}
        index={4}
        to={web3State.attacker.options.address}
        from={web3State.currentAccount[0]}
        balance={balances[4]}
        isEOA={false}
        sendfunc={send}
        />

      
      </Card.Group>
    </div>
  );
}

export default App;
